package {{.Package}}

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"github.com/{{.OrgName}}/{{.RepoName}}/pkg/api"
	"github.com/{{.OrgName}}/{{.RepoName}}/pkg/bolt"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
)

// ErrBadRouting when the ID is malformed
var ErrBadRouting = errors.New("Bad id in route")
var ErrBadRequest = errors.New("Bad request")

func decodeIDRequest(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	paramID, ok := vars["id"]

	if !ok {
		return nil, ErrBadRouting
	}

	id, err := strconv.Atoi(paramID)
	if err != nil {
		return nil, ErrBadRouting
	}

	return ObjID{id}, nil
}

func decode{{.Type}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	var obj ObjRequest
	if r.Body == nil {
		return nil, ErrBadRequest
	}

	if err := json.NewDecoder(r.Body).Decode(&obj); err != nil {
		return nil, err
	}

	vars := mux.Vars(r)
	paramID, ok := vars["id"]

	if ok {
		id, err := strconv.Atoi(paramID)
		if err != nil {
			return nil, ErrBadRouting
		}
		obj.ID = id
	}

	return obj, nil
}

func decodeEmptyRequest(_ context.Context, r *http.Request) (interface{}, error) {
	return nil, nil
}

// MakeHTTPHandler for healthcheck service
func MakeHTTPHandler(e Endpoints) http.Handler {
	opts := httptransport.ServerErrorEncoder(encodeError)
	r := mux.NewRouter()

	r.Path("/api/v1/{{.Package}}s").Methods("GET").Handler(httptransport.NewServer(
		e.List,
		decodeEmptyRequest,
		httptransport.EncodeJSONResponse,
		opts,
	))

	r.Path("/api/v1/{{.Package}}s/{id:[0-9]+}").Methods("GET").Handler(httptransport.NewServer(
		e.Retreive,
		decodeIDRequest,
		httptransport.EncodeJSONResponse,
		opts,
	))

	r.Path("/api/v1/").Methods("POST").Handler(httptransport.NewServer(
		e.Create,
		decode{{.Type}}Request,
		httptransport.EncodeJSONResponse,
		opts,
	))

	r.Path("/api/v1/{{.Package}}s/{id:[0-9]+}").Methods("PUT").Handler(httptransport.NewServer(
		e.Update,
		decode{{.Type}}Request,
		httptransport.EncodeJSONResponse,
		opts,
	))

	r.Path("/api/v1/{{.Package}}s/{id:[0-9]+}").Methods("DELETE").Handler(httptransport.NewServer(
		e.Delete,
		decodeIDRequest,
		httptransport.EncodeJSONResponse,
		opts,
	))

	return r
}

// encode errors from business-logic
func encodeError(ctx context.Context, err error, w http.ResponseWriter) {
	switch err {
	case bolt.ErrNotFound:
		err = api.NewError(err.Error()).SetStatusCode(404)
	}

	if _, ok := err.(api.Error); !ok {
		err = api.NewError(err.Error())
	}

	httptransport.DefaultErrorEncoder(ctx, err, w)
}
